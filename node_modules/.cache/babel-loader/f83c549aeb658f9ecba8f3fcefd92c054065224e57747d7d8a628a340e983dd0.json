{"ast":null,"code":"var _jsxFileName = \"D:\\\\geojson-viewer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport MapView from './MapView';\nimport logo from './images/logo-chakra.jpg'; // Import the logo image\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const handleFileChange = e => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        try {\n          const data = JSON.parse(reader.result);\n          setGeoJsonData(data);\n        } catch (error) {\n          console.error('Error parsing GeoJSON file', error);\n          alert('Error parsing GeoJSON file. Please ensure it is valid.');\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"heading-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: logo,\n          alt: \"Logo\",\n          className: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this), \" \", /*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"heading\",\n          children: \"Map Viewer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"loadfile\",\n      name: \"loadfile\",\n      type: \"file\",\n      accept: \".geojson\",\n      onChange: handleFileChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"loadfile\",\n      children: \"Load GeoJSON\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"map-container\",\n      children: /*#__PURE__*/_jsxDEV(MapView, {\n        geoJsonData: geoJsonData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n      className: \"credits\",\n      children: /*#__PURE__*/_jsxDEV(\"a\", {\n        href: \"https://www.flaticon.com/free-icons/parchment\",\n        title: \"parchment icons\",\n        children: \"Parchment icons created by Freepik - Flaticon\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"activity\",\n      className: \"textbox\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Z8XmfMueA5Wda06yIH3YSkhOjo4=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","MapView","logo","jsxDEV","_jsxDEV","App","_s","geoJsonData","setGeoJsonData","handleFileChange","e","file","target","files","reader","FileReader","onloadend","data","JSON","parse","result","error","console","alert","readAsText","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","id","name","type","accept","onChange","htmlFor","href","title","_c","$RefreshReg$"],"sources":["D:/geojson-viewer/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport MapView from './MapView';\nimport logo from './images/logo-chakra.jpg'; // Import the logo image\n\nfunction App() {\n  const [geoJsonData, setGeoJsonData] = useState(null);\n\n  const handleFileChange = (e) => {\n    const file = e.target.files[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        try {\n          const data = JSON.parse(reader.result);\n          setGeoJsonData(data);\n        } catch (error) {\n          console.error('Error parsing GeoJSON file', error);\n          alert('Error parsing GeoJSON file. Please ensure it is valid.');\n        }\n      };\n      reader.readAsText(file);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div className=\"heading-container\">\n          <img src={logo} alt=\"Logo\" className=\"logo\" /> {/* Use the imported logo */}\n          <h1 className=\"heading\">Map Viewer</h1>\n        </div>\n      </header>\n      <input id=\"loadfile\" name=\"loadfile\" type=\"file\" accept=\".geojson\" onChange={handleFileChange} />\n      <label htmlFor=\"loadfile\">Load GeoJSON</label>\n      <div className=\"map-container\">\n        <MapView geoJsonData={geoJsonData} />\n      </div>\n      <footer className=\"credits\">\n        <a href=\"https://www.flaticon.com/free-icons/parchment\" title=\"parchment icons\">Parchment icons created by Freepik - Flaticon</a>\n      </footer>\n      <div id=\"activity\" className=\"textbox\"></div>\n    </div>\n  );\n}\n\nexport default App;\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}