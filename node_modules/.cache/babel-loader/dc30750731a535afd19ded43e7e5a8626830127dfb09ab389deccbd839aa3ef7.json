{"ast":null,"code":"var _jsxFileName = \"D:\\\\geojson-viewer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport 'ol/ol.css';\nimport { Map, View } from 'ol';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport { fromLonLat } from 'ol/proj';\nimport { Point } from 'ol/geom';\nimport { Icon, Style } from 'ol/style';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Feature } from 'ol';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapView = ({\n  geoJsonData,\n  editGeoJsonData,\n  currentMode,\n  onAddIcon\n}) => {\n  _s();\n  const mapRef = useRef(null);\n  const vectorSource = useRef(new VectorSource());\n  useEffect(() => {\n    // Initialize the map\n    const map = new Map({\n      target: mapRef.current,\n      layers: [new TileLayer({\n        source: new OSM()\n      }), new VectorLayer({\n        source: vectorSource.current,\n        style: new Style({\n          image: new Icon({\n            anchor: [0.5, 1],\n            src: '' // Monument icon path\n          })\n        })\n      })],\n      view: new View({\n        center: fromLonLat([0, 0]),\n        zoom: 2\n      })\n    });\n\n    // Handle map clicks in edit mode to add a new icon\n    map.on('click', event => {\n      if (currentMode === 'edit') {\n        const coordinate = event.coordinate;\n        const lonLat = fromLonLat(coordinate);\n        onAddIcon(lonLat);\n      }\n    });\n\n    // Update features when geoJsonData or editGeoJsonData changes\n    const updateFeatures = data => {\n      if (!data || !data.features) return;\n      const features = new GeoJSON().readFeatures(data, {\n        featureProjection: map.getView().getProjection()\n      });\n      vectorSource.current.clear();\n      vectorSource.current.addFeatures(features);\n    };\n    updateFeatures(currentMode === 'view' ? geoJsonData : editGeoJsonData);\n    return () => {\n      map.setTarget(null);\n    };\n  }, [geoJsonData, editGeoJsonData, currentMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    className: \"map-container\",\n    style: {\n      width: '100%',\n      height: '500px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 10\n  }, this);\n};\n_s(MapView, \"IOqlVpyxR+nuZip7GHSALKBm5hU=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useRef","Map","View","Tile","TileLayer","Vector","VectorLayer","OSM","VectorSource","fromLonLat","Point","Icon","Style","GeoJSON","Feature","jsxDEV","_jsxDEV","MapView","geoJsonData","editGeoJsonData","currentMode","onAddIcon","_s","mapRef","vectorSource","map","target","current","layers","source","style","image","anchor","src","view","center","zoom","on","event","coordinate","lonLat","updateFeatures","data","features","readFeatures","featureProjection","getView","getProjection","clear","addFeatures","setTarget","ref","className","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/geojson-viewer/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport 'ol/ol.css';\nimport { Map, View } from 'ol';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport { OSM, Vector as VectorSource } from 'ol/source';\nimport { fromLonLat } from 'ol/proj';\nimport { Point } from 'ol/geom';\nimport { Icon, Style } from 'ol/style';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { Feature } from 'ol';\n\nconst MapView = ({ geoJsonData, editGeoJsonData, currentMode, onAddIcon }) => {\n  const mapRef = useRef(null);\n  const vectorSource = useRef(new VectorSource());\n\n  useEffect(() => {\n    // Initialize the map\n    const map = new Map({\n      target: mapRef.current,\n      layers: [\n        new TileLayer({\n          source: new OSM(),\n        }),\n        new VectorLayer({\n          source: vectorSource.current,\n          style: new Style({\n            image: new Icon({\n              anchor: [0.5, 1],\n              src: '', // Monument icon path\n            }),\n          }),\n        }),\n      ],\n      view: new View({\n        center: fromLonLat([0, 0]),\n        zoom: 2,\n      }),\n    });\n\n    // Handle map clicks in edit mode to add a new icon\n    map.on('click', (event) => {\n      if (currentMode === 'edit') {\n        const coordinate = event.coordinate;\n        const lonLat = fromLonLat(coordinate);\n        onAddIcon(lonLat);\n      }\n    });\n\n    // Update features when geoJsonData or editGeoJsonData changes\n    const updateFeatures = (data) => {\n      if (!data || !data.features) return;\n\n      const features = new GeoJSON().readFeatures(data, {\n        featureProjection: map.getView().getProjection(),\n      });\n      vectorSource.current.clear();\n      vectorSource.current.addFeatures(features);\n    };\n\n    updateFeatures(currentMode === 'view' ? geoJsonData : editGeoJsonData);\n\n    return () => {\n      map.setTarget(null);\n    };\n  }, [geoJsonData, editGeoJsonData, currentMode]);\n\n  return <div ref={mapRef} className=\"map-container\" style={{ width: '100%', height: '500px' }}></div>;\n};\n\nexport default MapView;\n\n\n\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}