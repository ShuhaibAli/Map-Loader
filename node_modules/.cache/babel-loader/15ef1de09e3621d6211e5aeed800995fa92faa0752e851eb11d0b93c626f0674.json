{"ast":null,"code":"var _jsxFileName = \"D:\\\\geojson-viewer\\\\src\\\\MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport 'ol/ol.css';\nimport { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport VectorLayer from 'ol/layer/Vector';\nimport OSM from 'ol/source/OSM';\nimport VectorSource from 'ol/source/Vector';\nimport { fromLonLat } from 'ol/proj';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapView = ({\n  geoJsonData\n}) => {\n  _s();\n  const mapElement = useRef(null);\n  const map = useRef(null);\n  useEffect(() => {\n    if (!map.current && mapElement.current) {\n      console.log('Initializing map...');\n      map.current = new Map({\n        target: mapElement.current,\n        layers: [new TileLayer({\n          source: new OSM()\n        })],\n        view: new View({\n          center: fromLonLat([0, 0]),\n          zoom: 2\n        })\n      });\n    }\n  }, []);\n  useEffect(() => {\n    if (geoJsonData && map.current) {\n      console.log('Plotting GeoJSON data...', geoJsonData);\n      const vectorSource = new VectorSource({\n        features: new GeoJSON().readFeatures(geoJsonData, {\n          featureProjection: 'EPSG:3857'\n        })\n      });\n      const vectorLayer = new VectorLayer({\n        source: vectorSource\n      });\n      map.current.addLayer(vectorLayer);\n      map.current.getView().fit(vectorSource.getExtent(), {\n        duration: 1000\n      });\n    }\n  }, [geoJsonData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapElement,\n    style: {\n      width: '1000px',\n      height: '510px',\n      backgroundColor: 'lightgray'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n};\n_s(MapView, \"x0xAN+i6iN7g5Qy/xmbRadQJM0k=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useRef","Map","View","TileLayer","VectorLayer","OSM","VectorSource","fromLonLat","GeoJSON","jsxDEV","_jsxDEV","MapView","geoJsonData","_s","mapElement","map","current","console","log","target","layers","source","view","center","zoom","vectorSource","features","readFeatures","featureProjection","vectorLayer","addLayer","getView","fit","getExtent","duration","ref","style","width","height","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/geojson-viewer/src/MapView.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport 'ol/ol.css';\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport OSM from 'ol/source/OSM';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\n\r\nconst MapView = ({ geoJsonData }) => {\r\n  const mapElement = useRef(null);\r\n  const map = useRef(null);\r\n\r\n  useEffect(() => {\r\n    if (!map.current && mapElement.current) {\r\n      console.log('Initializing map...');\r\n      map.current = new Map({\r\n        target: mapElement.current,\r\n        layers: [\r\n          new TileLayer({\r\n            source: new OSM(),\r\n          }),\r\n        ],\r\n        view: new View({\r\n          center: fromLonLat([0, 0]),\r\n          zoom: 2,\r\n        }),\r\n      });\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (geoJsonData && map.current) {\r\n      console.log('Plotting GeoJSON data...', geoJsonData);\r\n      const vectorSource = new VectorSource({\r\n        features: new GeoJSON().readFeatures(geoJsonData, {\r\n          featureProjection: 'EPSG:3857',\r\n        }),\r\n      });\r\n      const vectorLayer = new VectorLayer({\r\n        source: vectorSource,\r\n      });\r\n      map.current.addLayer(vectorLayer);\r\n      map.current.getView().fit(vectorSource.getExtent(), { duration: 1000 });\r\n    }\r\n  }, [geoJsonData]);\r\n\r\n  return (\r\n    <div\r\n      ref={mapElement}\r\n      style={{ width: '1000px', height: '510px', backgroundColor: 'lightgray' }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default MapView;\r\n\r\n\r\n\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,WAAW;AAClB,SAASC,GAAG,EAAEC,IAAI,QAAQ,IAAI;AAC9B,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,GAAG,MAAM,eAAe;AAC/B,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,SAASC,UAAU,QAAQ,SAAS;AACpC,OAAOC,OAAO,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAMC,UAAU,GAAGd,MAAM,CAAC,IAAI,CAAC;EAC/B,MAAMe,GAAG,GAAGf,MAAM,CAAC,IAAI,CAAC;EAExBD,SAAS,CAAC,MAAM;IACd,IAAI,CAACgB,GAAG,CAACC,OAAO,IAAIF,UAAU,CAACE,OAAO,EAAE;MACtCC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCH,GAAG,CAACC,OAAO,GAAG,IAAIf,GAAG,CAAC;QACpBkB,MAAM,EAAEL,UAAU,CAACE,OAAO;QAC1BI,MAAM,EAAE,CACN,IAAIjB,SAAS,CAAC;UACZkB,MAAM,EAAE,IAAIhB,GAAG,CAAC;QAClB,CAAC,CAAC,CACH;QACDiB,IAAI,EAAE,IAAIpB,IAAI,CAAC;UACbqB,MAAM,EAAEhB,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;UAC1BiB,IAAI,EAAE;QACR,CAAC;MACH,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,EAAE,CAAC;EAENzB,SAAS,CAAC,MAAM;IACd,IAAIa,WAAW,IAAIG,GAAG,CAACC,OAAO,EAAE;MAC9BC,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEN,WAAW,CAAC;MACpD,MAAMa,YAAY,GAAG,IAAInB,YAAY,CAAC;QACpCoB,QAAQ,EAAE,IAAIlB,OAAO,CAAC,CAAC,CAACmB,YAAY,CAACf,WAAW,EAAE;UAChDgB,iBAAiB,EAAE;QACrB,CAAC;MACH,CAAC,CAAC;MACF,MAAMC,WAAW,GAAG,IAAIzB,WAAW,CAAC;QAClCiB,MAAM,EAAEI;MACV,CAAC,CAAC;MACFV,GAAG,CAACC,OAAO,CAACc,QAAQ,CAACD,WAAW,CAAC;MACjCd,GAAG,CAACC,OAAO,CAACe,OAAO,CAAC,CAAC,CAACC,GAAG,CAACP,YAAY,CAACQ,SAAS,CAAC,CAAC,EAAE;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IACzE;EACF,CAAC,EAAE,CAACtB,WAAW,CAAC,CAAC;EAEjB,oBACEF,OAAA;IACEyB,GAAG,EAAErB,UAAW;IAChBsB,KAAK,EAAE;MAAEC,KAAK,EAAE,QAAQ;MAAEC,MAAM,EAAE,OAAO;MAAEC,eAAe,EAAE;IAAY;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC3E,CAAC;AAEN,CAAC;AAAC9B,EAAA,CA5CIF,OAAO;AAAAiC,EAAA,GAAPjC,OAAO;AA8Cb,eAAeA,OAAO;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}