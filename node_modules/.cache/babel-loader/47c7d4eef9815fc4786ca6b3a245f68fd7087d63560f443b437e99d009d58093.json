{"ast":null,"code":"var _jsxFileName = \"D:\\\\geojson-viewer\\\\src\\\\MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport 'ol/ol.css';\nimport { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport VectorLayer from 'ol/layer/Vector';\nimport OSM from 'ol/source/OSM';\nimport VectorSource from 'ol/source/Vector';\nimport { fromLonLat } from 'ol/proj';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapView = ({\n  geoJsonData\n}) => {\n  _s();\n  const mapElement = useRef();\n  const map = useRef();\n  useEffect(() => {\n    map.current = new Map({\n      target: mapElement.current,\n      layers: [new TileLayer({\n        source: new OSM()\n      })],\n      view: new View({\n        center: fromLonLat([0, 0]),\n        zoom: 2\n      })\n    });\n  }, []);\n  useEffect(() => {\n    if (geoJsonData) {\n      const vectorSource = new VectorSource({\n        features: new GeoJSON().readFeatures(geoJsonData, {\n          featureProjection: 'EPSG:3857'\n        })\n      });\n      const vectorLayer = new VectorLayer({\n        source: vectorSource\n      });\n      map.current.addLayer(vectorLayer);\n      map.current.getView().fit(vectorSource.getExtent(), {\n        duration: 1000\n      });\n    }\n  }, [geoJsonData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapElement,\n    style: {\n      width: '100%',\n      height: '400px'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 10\n  }, this);\n};\n_s(MapView, \"x0xAN+i6iN7g5Qy/xmbRadQJM0k=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useRef","Map","View","TileLayer","VectorLayer","OSM","VectorSource","fromLonLat","GeoJSON","jsxDEV","_jsxDEV","MapView","geoJsonData","_s","mapElement","map","current","target","layers","source","view","center","zoom","vectorSource","features","readFeatures","featureProjection","vectorLayer","addLayer","getView","fit","getExtent","duration","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/geojson-viewer/src/MapView.js"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\r\nimport 'ol/ol.css';\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport OSM from 'ol/source/OSM';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport { fromLonLat } from 'ol/proj';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\n\r\nconst MapView = ({ geoJsonData }) => {\r\n  const mapElement = useRef();\r\n  const map = useRef();\r\n\r\n  useEffect(() => {\r\n    map.current = new Map({\r\n      target: mapElement.current,\r\n      layers: [\r\n        new TileLayer({\r\n          source: new OSM(),\r\n        }),\r\n      ],\r\n      view: new View({\r\n        center: fromLonLat([0, 0]),\r\n        zoom: 2,\r\n      }),\r\n    });\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (geoJsonData) {\r\n      const vectorSource = new VectorSource({\r\n        features: new GeoJSON().readFeatures(geoJsonData, {\r\n          featureProjection: 'EPSG:3857',\r\n        }),\r\n      });\r\n      const vectorLayer = new VectorLayer({\r\n        source: vectorSource,\r\n      });\r\n      map.current.addLayer(vectorLayer);\r\n      map.current.getView().fit(vectorSource.getExtent(), { duration: 1000 });\r\n    }\r\n  }, [geoJsonData]);\r\n\r\n  return <div ref={mapElement} style={{ width: '100%', height: '400px' }} />;\r\n};\r\n\r\nexport default MapView;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAChD,OAAO,WAAW;AAClB,SAASC,GAAG,EAAEC,IAAI,QAAQ,IAAI;AAC9B,OAAOC,SAAS,MAAM,eAAe;AACrC,OAAOC,WAAW,MAAM,iBAAiB;AACzC,OAAOC,GAAG,MAAM,eAAe;AAC/B,OAAOC,YAAY,MAAM,kBAAkB;AAC3C,SAASC,UAAU,QAAQ,SAAS;AACpC,OAAOC,OAAO,MAAM,mBAAmB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,MAAMC,OAAO,GAAGA,CAAC;EAAEC;AAAY,CAAC,KAAK;EAAAC,EAAA;EACnC,MAAMC,UAAU,GAAGd,MAAM,CAAC,CAAC;EAC3B,MAAMe,GAAG,GAAGf,MAAM,CAAC,CAAC;EAEpBD,SAAS,CAAC,MAAM;IACdgB,GAAG,CAACC,OAAO,GAAG,IAAIf,GAAG,CAAC;MACpBgB,MAAM,EAAEH,UAAU,CAACE,OAAO;MAC1BE,MAAM,EAAE,CACN,IAAIf,SAAS,CAAC;QACZgB,MAAM,EAAE,IAAId,GAAG,CAAC;MAClB,CAAC,CAAC,CACH;MACDe,IAAI,EAAE,IAAIlB,IAAI,CAAC;QACbmB,MAAM,EAAEd,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;QAC1Be,IAAI,EAAE;MACR,CAAC;IACH,CAAC,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC;EAENvB,SAAS,CAAC,MAAM;IACd,IAAIa,WAAW,EAAE;MACf,MAAMW,YAAY,GAAG,IAAIjB,YAAY,CAAC;QACpCkB,QAAQ,EAAE,IAAIhB,OAAO,CAAC,CAAC,CAACiB,YAAY,CAACb,WAAW,EAAE;UAChDc,iBAAiB,EAAE;QACrB,CAAC;MACH,CAAC,CAAC;MACF,MAAMC,WAAW,GAAG,IAAIvB,WAAW,CAAC;QAClCe,MAAM,EAAEI;MACV,CAAC,CAAC;MACFR,GAAG,CAACC,OAAO,CAACY,QAAQ,CAACD,WAAW,CAAC;MACjCZ,GAAG,CAACC,OAAO,CAACa,OAAO,CAAC,CAAC,CAACC,GAAG,CAACP,YAAY,CAACQ,SAAS,CAAC,CAAC,EAAE;QAAEC,QAAQ,EAAE;MAAK,CAAC,CAAC;IACzE;EACF,CAAC,EAAE,CAACpB,WAAW,CAAC,CAAC;EAEjB,oBAAOF,OAAA;IAAKuB,GAAG,EAAEnB,UAAW;IAACoB,KAAK,EAAE;MAAEC,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC5E,CAAC;AAAC3B,EAAA,CAnCIF,OAAO;AAAA8B,EAAA,GAAP9B,OAAO;AAqCb,eAAeA,OAAO;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}